Problem Link:- https://leetcode.com/problems/path-crossing/description/?envType=daily-question&envId=2023-12-23

///////////////////////////////////////////////////////////////////////////////////////////////

Approach :-

1)  Take 2 co-ordinates x,y;
2)  Increment and decrement according to the NSWE;
3)  check if any point occurs twice using set and compare their size !
4)  if size or set and vector is same then vector has all unique elements and not overlaps!

//////////////////////////////////////////////////////////////////////////////////////////////////

Complexity

Time complexity:   O(N)

Space complexity:  O(N)

/////////////////////////////////////////////////////////////////////////////////////////////////

Code :-

       class Solution {
public:
    bool isPathCrossing(string path) 
    {
        map<pair<int,int>, bool> visited;
        int x = 0, y = 0; // Initializing the starting point (0,0)

        for(auto c : path)
         {
            visited[{x, y}] = true; // Mark the current coordinate as visited

            // Update the coordinates based on the direction
            if(c == 'N') y++; // Move north
            else if(c == 'S') y--; // Move south
            else if(c == 'E') x++; // Move east
            else x--; // Move west

            // Check if the current coordinate has been visited before
            if(visited[{x, y}]) return true; // If visited, there's a crossing
        }

        return false;
        
    }
};
